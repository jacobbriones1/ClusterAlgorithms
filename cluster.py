# Clustering Methods and Algorithms
# Jacob Briones

from numpy import sqrt
import numpy as np

# Euclidean Distance
def d(u, v):
    n = len(list(u))
    if len(v) != n:
        return
    return sqrt(np.sum((np.array(u)-np.array(v))**2))


# Distance to closest center
def distFromCenter(point, centers):
    return min([d(point,x) for x in centers])


# Maximum of distFromCenter(x,centers) over all x in Data
def MaxDistance(Data, Centers):
    return max([distFromCenter(x,Centers) for x in Data])


# Distortion between Data and Centers
def distortion(Data, Centers):
    n = len(list(Data))
    Data = np.array(Data)
    return (1/n)*np.sum(np.array([distFromCenter(x,Centers)**2 for x in Data]))

# Return center of gravity of set of points
def centerOfGravity(X):
    n = len(list(X[0]))
    k = len(list(X))
    X = np.array(X).reshape((k,n))
    
    COG = [np.sum(X[:,i])/k for i in range(n)]
    return COG

# First Farthest Algorithm:
#  Returns array of centers
def FirstFarthest(Data,  k):
    centers = []
    centers.append(Data[0])
    while len(centers)< k:
        DataPoint = max([x for x in Data if distFromCenter(x,centers)==MaxDistance(Data,centers)] )
        centers.append(DataPoint)
    return np.array(centers)

def centersToClusters(Data, centers):
    k = len(list(centers))
    Cl = dict()
    for i in range(k):
        Cl[i]=[]
    for i in range(k):
        for x in Data:
            if d(x, centers[i])== distFromCenter(x,centers):
                Cl[i].append(x)
            else:
                continue
    clusters = [Cl[i] for i in range(k)]
    return clusters

# Returns array of k centers generated by Lloyd's Algorithm
def lloydsAlgorithm(Data, k):
    randIndex = list(np.random.choice([i for i in range(len(list(Data)))],k))

    centers = [Data[i] for i in randIndex]
    iterate = True
    while iterate == True:
        clusters = centersToClusters(Data,centers)
        C = []
        for cluster in clusters:
            C.append(centerOfGravity(cluster))
        v = np.array(C)==np.array(centers)
        if v.all():
            iterate = False
            break
        else:
            centers = np.array(C)
    return clusters
        
        
    
    
    
    
            

# Test
if __name__=='__main__':
    X = np.array([[1,3],[1,6],[3,4],[5,2],[5,6],[7,1],[8,7],[10,3]])
    print('LLoyds Algorithm(k=3):',lloydsAlgorithm(X,3))
        
    
